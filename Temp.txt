import { Component, OnInit } from '@angular/core';
import * as _ from 'lodash';
import * as joint from 'jointjs';

@Component({
  selector: 'app-harcodedframe',
  templateUrl: './harcodedframe.component.html',
  styleUrls: ['./harcodedframe.component.css']
})
export class Temp implements OnInit {

  constructor() { }
  ngOnInit() {
    this.frame();
  }
  frame() {
    let graph = new joint.dia.Graph();
    let paper = new joint.dia.Paper({
      el: document.getElementById('myholder'),  // Id on the HTML based on which the graph is drawn
      model: graph,
      width: 1000, // Size of the graph
      height: 1000,
      gridSize: 1
    });

    /* The below Function imageGeneration creates an image with text under it on the position x,y where x,y are the top left corner
       The parameters are -> id ( kinda like the unique identifier of the image)
                             x cordinate of the top left corner
                             y cordinate of the top left corner
                             width of the image
                             height of the image
                             .jpg  file name from the local which has to be used on the graph
                             Text which has to be present under the image
    */


    let tempImage1 = this.imageGeneration('1', 100, 100, 100, 100, 'marketing','Marketing');
    let tempImage2 = this.imageGeneration('2', 350, 100, 100, 100, 'earth','Something');
    let tempImage3 = this.imageGeneration('3', 150, 350, 100, 100, 'window','Shopping Cart');
    let tempImage4 = this.imageGeneration('4', 400, 350, 100, 100, 'window','Product Listing');
    let tempImage5 = this.imageGeneration('5', 650, 350, 100, 100, 'window','Web Store');
    let tempImage6 = this.imageGeneration('6', 870, 150, 100, 100, 'computer','pdws server 1');
    let tempImage7 = this.imageGeneration('7', 870, 350, 100, 100, 'computer','pdws server 2');
    let tempImage8 = this.borderedImage('8', 870, 550, 100, 100, 'computer', 'pwedsr0Main');

    /* The below funtion borderedImage creates an image with a border and a text
       The parameters are -> id ( kinda like the unique identifier of the image)
                             x cordinate of the top left corner
                             y cordinate of the top left corner
                             width of the image
                             height of the image
                             .jpg  file name from the local which has to be used on the graph
                             Text which has to be present under the image

    */


    let borderImage1 = this.borderedImage('9', 650, 600, 100, 100, 'customer', ' Customer');

    /* This function is not usually needed as the text under the image if needed can be obtained from imageGeneration
     This is just in case you want a seperate text at various places over the graph
     The parameters are  -> x cordinate of the top left corner
                            y cordinate of the top left corner
                            the text needed to be added into the graph
    */

    let text1 = this.textUnder(100, 205, 'Marketing');
    let text2 = this.textUnder(355, 205, 'Something');
    let text3 = this.textUnder(150, 455, 'Shopping Cart');
    let text4 = this.textUnder(400, 455, 'Product Listing');
    let text5 = this.textUnder(650, 305, 'Web Store');
    let text6 = this.textUnder(870, 255, 'pwdser1');
    let text7 = this.textUnder(870, 455, 'pwdser2');

    /*This function creates the link ( i.e line connecting 2 images )
     The first number is the id from the connection starts and second number is to the image where the connection terminates
     The text is whatever text which you want the link to have on it.
     The color in the end is what the color of the link will be
    */

    let link  = this.generateLink('1', '2', 'Requires', 'red');
    let link1 = this.generateLink('2', '3', 'Requires', 'red');
    let link2 = this.generateLink('2', '4', 'Requires', 'red');
    let link3 = this.generateLink('2', '5', 'Requires', 'red');
    let link4 = this.generateLink('5', '6', 'Requires', 'red');
    let link5 = this.generateLink('5', '7', 'Requires', 'red');
    let link6 = this.generateLink('5', '8', 'Requires', 'red');
    let link7 = this.generateLink('9', '5', 'Serves To', 'yellow');

    // The created and return objects are to be added into the Graph for them to be visible on the Web Page

    graph.addCells([tempImage1, tempImage2, link, tempImage3,  link1, tempImage4, link2, tempImage5, link3,
      link4, link5, link6, tempImage6, tempImage7, tempImage8, borderImage1, link7, text1, text2, text3, text4, text5, text6, text7]);

    /* The below code snippet allows exporting the created graph into Json Format


     let json = graph.toJSON()
     let theJSON = JSON.stringify(json);
     let uri = 'data:application/json;charset=UTF-8,' + encodeURIComponent(theJSON);

     let a = document.createElement('a');
     a.href = uri;
     a.innerHTML = 'Right-click and choose save as...';
     document.body.appendChild(a);

    */

  }


  textUnder(xpos, ypos, boxText) {
    let textbox = new joint.shapes.standard.Rectangle();
    textbox.position(xpos, ypos);
    textbox.resize(100, 40);
    textbox.attr({
      body: {
        fill: 'white',
        stroke: 'white'
      },
      label: {
        text: boxText,
        fill: 'black',
        fontSize: 18
      }
    });
    return textbox;
  }


  borderedImage(imageId, xpos, ypos, sizewidth, sizeheight, name, imageText) {
    let borderedImage = new joint.shapes.standard.BorderedImage({
      id: imageId,
      position: {
        x: xpos,
        y: ypos
      },
      size: {
        width: sizewidth,
        height: sizeheight
      },
      attrs: {
        image: {
          'xlink:href': '../../assets/Images/' + name + '.jpg',
          width: sizewidth,
          height: sizeheight
        },
        label: {
          text: imageText
        }
      }
    });
    return borderedImage;
  }


  generateLink(source, target, linkText, linkColor) {
    let link = new joint.shapes.standard.Link({
      source: {
        id: source,
        port: 'out',

      },
      target: {
        id: target,
        port: 'in'
      },
      attrs:
      {
        line: {
          stroke: linkColor,
        },

      },
    });
    link.appendLabel({
      attrs: {
        text: {
          text: linkText
        }
      }
    });
    return link;
  }


  imageGeneration(imageId, xpos, ypos, sizewidth, sizeheight, name,label) {
    let image = new joint.shapes.basic.Image({
      id: imageId,
      position: {
        x: xpos,
        y: ypos
      },
      size: {
        width: sizewidth,
        height: sizeheight
      },
      attrs: {
        image: {
          'xlink:href': '../../assets/Images/' + name + '.jpg',
          width: sizewidth,
          height: sizeheight,
        },
        text:{
          text:label
        }
      }
    });

    return image;
  }
}
